* First edition preface
- ``Pragmatic'', from the Latin /pragmaticus/: skilled in
  business. From the Greek πραγματικός: fit for use.

- Our business here is /doing/. Programming is a /craft/. [gp: Like
  medicine, we are dealing here with a /techne/. See also /know how/
  vs /know that/].

- Theory + Practice -> Strength

- The pragmatic approach leads to:
  - gaining experience rapidly;
  - increasing productivity;
  - understanding better the development process;
  - writing better software;

- Pragmatic programmers' common traits:
  - Early adopter, fast adapter;
  - Inquisitive;
  - Critical thinker;
  - Realistic;
  - Jack of all trades;
  - *Care about your craft (Tip 1)*;
  - *Think! About your work (Tip 2)*.

#+begin_quote
``Within the overall structure of a project there is always room for
individuality and craftmaship''.
#+end_quote

- Every day a small amount of care. /Kaizen/: Every day work to refine
  your skills and add new tools to your repertoire.

* Chapter 1. A Pragmatic Philosophy
** 1: It's your life.
- The most important tip in the book: *You Have Agency (Tip 3)*. You
  can try to fix what does not work in your life.
** 2: The Cat Ate My Source Code
- Ignorance and mistakes are part of the picture. Your picture. Accept
  them. And deal with them professionally, honestlym, and directly.

- Trust in team is essential for creativity and collaboration (see
  http://dx.doi.org/10.1037/apl0000110).

- *Take responsibility.* You might not control over any aspect of what
  you commit yourself to do. Decide whether you committing or not
  based on your values and judgments. If you do not achieve the
  outcome for which you have accepted responsibility, you should
  expected to be held accountable for it. Don't make excuses. Don't
  blame others. Accept it and try to offer solutions. *Tip 4: Provide
  Options, Don't Make Lame Excuses*.

** 3: Software Entropy
- ``Entropy'': the amount of ``disorder'' in a system.

- ``Software rot''. ``Technical debt''.

- A broken window can quickly turn a building into a derelict. People
  lose the will to fight entropy because they perceived that no one
  else cares.

- *Tip 5: Don't Live with Broken Windows*.

- As soon as you discover a broken window, fix it. If there is not
  time, board it up in some way.

** 4: Stone Soup and Boiled Frogs
- One way to bring change in the direction you want is to develop
  something, show it to people and state that it would be better if it
  we added... *Tip 6: Be a Catalyst for Change*.

- But don't let unnoticed change ruin your project. *Tip 7: Remember
  the Big Picture*.

** 5: Good-Enough Software
- User should be given the opportunity to participate in the process
  of deciding whether what it has been produced is good enough for
  their needs.

- *Tip 8: Make Quality a Requirement Issue*.

- Often trade-off are involved.

- Know when to stop. Don't aim at writing a perfect program. That
  ideal cannot be reached.

** 6: Your Knowledge Portfolio
#+begin_quote
Your knowledge and experience are your most important day-to-day
professional assets.
#+end_quote

- However, those assetts /expire/.

- To be sucessfull, you must invest in your /knowledge portfolio/
  (here `knowledge' includes practical skills, experience, etc.) in
  the same way one should invest in one's financial portfolio:
  1. Invest regularly. It should be a habit;
  2. Diversification;
  3. Balance between conservative/low-reward and high-risk/high-reward.
  4. Buy low, sell high.
  5. Review and rebalance the portfolio periodically.

- Try to develop and internalize a routine that allows you to form the
  habit of investing in your knowledge portfolio.

- *Tip 9: Invest Regularly in Your Knowledge Porfolio*.

- Way to invest:
  - learn a new language every year
  - read a technical book each month
  - take classes
  - Participate in local groups / meetups
  - Experiment with different environments/software
  - Stay current; read tech news and posts.

- Take any opportunity to learn.

- *Tip 10: Critically Analyze What Your Read and Hear*.

- Ask:
  - Why? At least five times. Like a petulant kid.
  - Who does this benefit?
  - What's the context?
  - When and Where would this work?
  - Why is this a problem?

** 7: Communicate!
- *Tip 11: English is Just Another Programming Language*

- Adapt to your audience. Make the appropriate pitch to each group.

- Communicate at the right moment. If you are not sure: “Is this a
  good time to talk about…?’

- Make it look good...

- Involve your audience with early drafts. You'll build relationships
  and get feedback to improve your writings.

- Listen to people.

- Get back to people.

- *Tip 12: It's Both What You Say and the Way You Say It*.

#+begin_quote
Pragmatic Programmers embrace documentation as an integral part of the
overall development process.
#+end_quote

- *Tip 13: Build Documentation In, Dont' Bolt it On*

- It is recommended to add comments to modules and exported functiosn
  to help other developers.

- However, it is recommended to restrict the non-API commenting only
  to discussing /why/ something is done, its purpose and its
  goal. (The code already shows the /how/.)
* Chapter 2. A Pragmatic Approach
** 8: The Essence of Good Design
- *Tip 14: Good Design is Easier to Change Than Bad Design*.

- Every design principle is a case of ETC (Easier To Change).

-  Start with a conscious effort:
    #+begin_quote
    “did the thing I just did make the overall system easier or harder
    to change?” Do it when you save a file. Do it when you write a
    test.  Do it when you fix a bug.
    #+end_quote
** 9: DRY --- The Evils of Duplication
- Knowlege is not stable. It changes. If we duplicate knowlege
  maintanace will be a nightmare.

- Every piece of knowledge must have a single, unambiguous,
  authoritative representation within a system. That is:

- *Tip 15: DRY --- Don't Repeat Yourself*.

- Ask yourself: when some aspect of the code changes, do you have to
  make changes in multiple places? If so, the code isn't DRY.

- The idea that you should comment all your functions is insanity.

- Active and frequent communication should be encouraged between
  developers.

- *Tip 16: Make It Easy to Reuse*.
** 10: Orthogonality
- Two things are said to be orthogonal if changes in one does not
  affet the other.

- You want to reduce interdependency among the system's components.
  For example, you want the database code to be orthogonal to the user
  interface.

- *Tip 17: Eliminate Effects Between Unrelated Things*.
** 11: Reversibility
- Critical decisions are not easily reversible.

- Many topics of this book recommends practices that makes us make
  less critical, irreversible decisions --- see, in particular DRY
  (p. 30), decoupling (p. 130), and use of external configuration on
  (p. 166).

- Example: suppose you want to change the relational database you are
  using, because another one is faster. If third-party calls are
  entangled throughout the code, then it's not going to be an easy
  task. However, if you really abstracted the idea of a databse, then
  you will be able to make this change in midstream!

- Another example: you begin by writing a browser-based application,
  but later one, you want it to be a mobile app...

- *Tip 18: There Are No Final Decisions*.

- Not only the /code/ can be flexible:
  - architecture;
  - deployment;
  - vendor integration.

- Hide third-party APIs behind your own abstraction layers.
- Break your code into components.

- *Tip 19: Forgo Following Fads*.
** 12: Tracer Bullets

